# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from dmss_api.models.base_model_ import Model
from dmss_api import util


class InlineObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, parent_id=None, type=None, attribute=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI

        :param name: The name of this InlineObject.  # noqa: E501
        :type name: str
        :param parent_id: The parent_id of this InlineObject.  # noqa: E501
        :type parent_id: str
        :param type: The type of this InlineObject.  # noqa: E501
        :type type: str
        :param attribute: The attribute of this InlineObject.  # noqa: E501
        :type attribute: str
        """
        self.openapi_types = {
            'name': str,
            'parent_id': str,
            'type': str,
            'attribute': str
        }

        self.attribute_map = {
            'name': 'name',
            'parent_id': 'parentId',
            'type': 'type',
            'attribute': 'attribute'
        }

        self._name = name
        self._parent_id = parent_id
        self._type = type
        self._attribute = attribute

    @classmethod
    def from_dict(cls, dikt) -> 'InlineObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_object of this InlineObject.  # noqa: E501
        :rtype: InlineObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InlineObject.


        :return: The name of this InlineObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject.


        :param name: The name of this InlineObject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this InlineObject.


        :return: The parent_id of this InlineObject.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this InlineObject.


        :param parent_id: The parent_id of this InlineObject.
        :type parent_id: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def type(self):
        """Gets the type of this InlineObject.


        :return: The type of this InlineObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineObject.


        :param type: The type of this InlineObject.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def attribute(self):
        """Gets the attribute of this InlineObject.


        :return: The attribute of this InlineObject.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this InlineObject.


        :param attribute: The attribute of this InlineObject.
        :type attribute: str
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")  # noqa: E501

        self._attribute = attribute
